/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2212                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      sampling;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Setup for surfaceFieldValue
//
//   restartTime:
//     - a 'one-shot' reset at a particular time
//
// fields [required]
//     Pairs of fields to use for calculating the deviation.
//     The fields must already exist on the surfaces.
//
// weightField [optional]
//     A scalar or vector field for weighting.
//
// postOperation [optional]
//     Modify the results by particular operations.
//     (none | sqrt)
//     The sqrt operation is useful when determining RMS values.
//
// The 'output/write' control triggers the calculation.
__surfaceFieldValue
{
    type            surfaceFieldValue;
    libs            (fieldFunctionObjects);
    log             on;
    enabled         true;

    writeControl    timeStep;
    writeInterval   1;

    writeFields     false;
    surfaceFormat   vtk;

    formatOptions
    {
        default
        {
            verbose true;
        }
    }

    // writeArea       true;

    // resetOnStartUp  true;
    // resetOnOutput   false;
    // periodicRestart true;
    // restartPeriod   0.0005;
}


// * * * * * * * * * * * * * * * * Sampling  * * * * * * * * * * * * * * * * //

// Sample volume fields to surfaces and hold on registry.
sampled
{
    type    surfaces;
    libs    (sampling);
    log     true;

    executeControl  timeStep;
    executeInterval 1;
    writeControl    none;
    sampleOnExecute true;

    surfaceFormat   none;

    fields      (p U rhoU pTotal);

    // Remove derived fields we created prior
    removeFieldsOnExecute   (rhoU pTotal);

    surfaces
    {
        inlet1
		{
			type		patch;
			patchName	inlet;
			interpolate true;
		}
    }
}


// * * * * * * * * * * * * * * * Calculations  * * * * * * * * * * * * * * * //

massflow
{
    ${__surfaceFieldValue}

    regionType      functionObjectSurface;
    name            sampled.inlet1;

    operation       areaNormalIntegrate;

    fields          ( rhoU );
}

areaAverage
{
    ${__surfaceFieldValue}

    regionType      functionObjectSurface;
    name            sampled.inlet1;

    operation       weightedAreaAverage;
    weightField     rhoU;
    fields          ( p pTotal );
}


// * * * * * * * * * * * * * * * * * Cleanup * * * * * * * * * * * * * * * * //

#remove "__.*"


// ************************************************************************* //
